STEP
-New Project
-composer require laravel/fortify
-php artisan vendor:publish --provider="Laravel\\Fortify\\FortifyServiceProvider"
-Migrate php artisan migrate

BOOTSTRAP
-You can install any frontend Frameworks -
-Laravel doesnt  use postCss
-Use Bootstrap  npm install bootstrap@next popper.js sass  sass-loader --save-dev
-Use Bootstrap  npm install bootstrap popper.js sass  sass-loader --save-dev
- Much better to do separate

WEBPACK
 -Laravel doesnt support postCss it use sass
   mix.js('resources/js/app.js', 'public/js')
       .sass('resources/sass/app.scss', 'public/css');
-Create sass folder in resource  scss/app.scss
-Import the bootstrap in app.scss
   @import "~bootstrap/scss/bootstrap";

NPM DEV
npm run dev

BUILD INTERFACE
 <!--STYLES-->
<link rel="stylesheet" href="{{ asset('css/app.css') }}" >

<!--STYLES-->
<script src="{{ asset('css/app.css') }}" defer></script>


B: BUILDING THE DASHBOARD UI USING BOOSTRAP 5
 -Building the dashboard from scratch
 -Building the nav bar
 -Go to sass /app.scss

 C:USER REGISTRATION ,LOGIN & LOGOUT -FORTIFY
 -Set  the laravel fortify
 -register our fortify to config->app
    App\Providers\FortifyServiceProvider::class,
-Let laravel know where the fortify view gonna be
   app/provider /fortifyServiceProvider
     Fortify::registerView(function (){
                return view('auth.register');
     });

-Build the register UI from copy from bootstrap
-Build the login UI from copy from bootstrap
-Create the logout functionality in the main/master app

DESIGN DATABASE SCHEMA USING MIGRATION
 -User &  Role
 -Many to Many Relationship
 -Pivot Table
 -Role : attribute "name"
 -php artisan make:model Role -a
 -Pivot
    php artisan make:migration create_role_user_table

Schema::table('role_user',function (Blueprint $table){
            $table->dropForeign('role_user_role_id_foreign');
            $table->dropForeign('role_user_user_id_foreign');
});

-Relationship in the Model  btn roles and users

SEEDING USERS AND ROLES USING FAKER
-seeding database via many to many
-we have Rolefactory and Roleseeder
-Let us create a user seeder
    php artisan make:seeder UserSeeder
-User Tinker
  User::factory()->make();
  User::factory()->count(5)->make();
-Faker Library
  https://github.com/fzaninotto/Faker
-Role Factory
 Role::factory()->make();
 Role::factory()->count(5)->make();

-Add coded in each seeder
-php artisan db:seed --class=RoleSeeder
-Link to many to many relation
    php artisan make:seeder RoleUserSeeder
-Assigning roles to a user in RoleUserSeeder

BUILD THE UI DASHBOARD TO DISPLAY THE USER
-To display to admin user to be able to adminstarte the CRUD(USER)
-Set the route
-Create User Controller with Admin
-php artisan make:controller Admin\\UserController -r
-Route group
  1:public where user can login and register
  2:user login and can see the certaion thing
  3:Admin can access the admin part
-Prefix in route
  prefix the admin
  prefix the name



  BUILDING THE CRUD GUI IN ADMIN PANEL

  -get all user and pass to the view
    return  view('admin.users.index')
                ->with([
                    'users'=>User::all(),
                    'users'=>User::all(),
     ]);

      return  view('admin.users.index',['users' => User::all()]);

ADDING PAGINATION AND DELETING USERS
-Go to tinker
 php artisan tinker
 User::factory()->count(50)->create();
 -We need to let laravel know that we're using bootstrap not tailwinds
 -Go AppServiceProvider

ASSIGN ROLES TO USERS , CREATING AND EDITING USERS
-show the role on user UI
-php artisan migrate:fresh --seed
-Create blade and use partial to create and Edit
-Error
  ErrorException
  Undefined offset: 1   problem  @foreach($roles $as $role) instead of  @foreach($roles as $role)
  mark@penguindigital.co.uk
  parameters: array:5 [▼
        "_token" => "YOparIpyRYABba3vOj7UCPbLniqL29oLXno8JH1f"
        "name" => "Bernard"
        "email" => "mark@penguindigital.co.uk"
        "password" => "password"
        "roles" => array:2 [▼
          0 => "1"
          1 => "2"
        ]
-Use the mutator to hash the password in user model
-Attach - one
-SYNC  - ARRAY

-Include has access the variables in the current page  ,component has access variable manually pass into it
-create a folder inside the admin/users called partials
    -name as form-blade.php
Method Illuminate\Database\Eloquent\Collection::sync does not exist.
$user->roles->sync($request->roles);  tobe $user->roles()->sync($request->roles);



FLASH MESSAGE  AND FORM VALIDATION
- create partials folder
-Inside partials create alert.blade.php
-We add the flash message in user controller store, edit and delete
-We hook the flash message to display to a user in main blade


PROTECTING PAGES WITH GATES
 - use the gates
 -Change the layout  a bit on layout navbar to show the login and register for all users even someone isnt login
 -Show the logged menu one the user has been logged in
 -First copy the all nav  bar  in the main layout
 -and paste undernith to a the copy of the sec bar and remove the logo
 -keep home and user links
 -get rid of login and register
 -In the first link menu  to remove home and user
 -Create how own gates
    AppServiceProvider.php in boot
     use Illuminate\Support\Facades\Gate;
     -user view ,controller in middleware

     if (Gate::denies('logged-in')){
                 dd('no access allowed');
     }

-we can us to our view
    @can('logged-in')
     -----
    @endcan

- we need to use the middleware to stop accessing pages
-Auto the box laravel comes with middleware auth
  Route::prefix('admin')->middleware('auth')->name('admin.')->group(function (){
      Route::resource('admin/users' ,UserController::class);
      //Route::resource('admin/users' ,UserController::class);
  });

  PROTECTING PAGES USING ROLES
  -create some method in user model
  -creating some customs middleware
  -restriction on certain part of application
  -In the user model
       /**
        * Check if the user has role
        * @param string $role
        * @return bool
        */
       public  function  hasAnyRole(string  $role)  //admin author
       {
           return null !== $this->roles()->where('name',$role)->first();
       }

       /**
        * Check the user has given role
        * @param array $role
        * @return bool
        */
       public  function  hasAnyRoles(array $role)  //admin author  taking arrays
       {
           return null !== $this->roles()->whereIn('name',$role)->first();
       }
- Under app - AuthServiceProvider
    Gate::define('is-admin', function ($user){
                return $user->hasAnyRole('admin');
   });

 -userController
  if (Gate::allows('is-admin')){

              return  view('admin.users.index', ['users' => User::paginate(10)]);
  }

THE BEST WAY
- Customs Middleware
  php artisan make:middleware  AccessAdmin
 - register the middlware in the kernel
     'auth.isAdmin'=>\App\Http\Middleware\AccessAdmin::class,
-You can apply to our web routes


USER REGISTRATION USING FORTIFY ACTIONS

-Use the fortify creation the user
    App -> Actions->Fortify

-added the input field in form called password_confirmation
-Admin usercontroller -> store method use the forttify instance instead of customs
-User model comments the setPasswordAttribute
















































































cd ~/.composer/vendor/bin/
 >pwd
/Users/os/.composer/vendor/bin

 export PATH=$HOME/bin:/usr/local/bin:$PATH

>vim ~/.aliases

alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias gco='git checkout '
alias gk='gitk --all&'
alias gx='gitx --all'

alias got='git '
alias get='git '
alias nah="git reset --hard && git clean -df"



























